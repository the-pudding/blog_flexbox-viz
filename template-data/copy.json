{"hed":"Making Data Viz with d3, Flexbox, and a Serious Lack of SVG","dek":"May seem like magic.","intro":[{"type":"text","value":"A few months ago, my co-worker <a href=https://pudding.cool/author/matt-daniels/ target=_blank>Matt</a> and I were collaborating on a project. I had been building a <a href=https://bl.ocks.org/mbostock/3886208 target=_blank>stacked bar chart</a> in <a href=https://d3js.org/ target=_blank>d3.js</a>, and was seriously struggling to get the bars to stack on top of each other nicely <em>and</em> to animate from the bottom of the graphic instead of the top. For some reason, the fact that an SVG space places its (0,0) coordinates at the <em>top</em> left corner instead of the <em>bottom</em> left corner will always cause some weird mental disconnect in my brain."},{"type":"text","value":"Amid all of my frustration, Matt suggested ditching the SVG altogether, making the bars out of <code>div</code> elements with a <code>background-color</code> and aligning them using <a href=https://css-tricks.com/snippets/css/a-guide-to-flexbox/ target=_blank>Flexbox</a>. To be totally honest, I was super confused by the suggestion because it involved a few things that I honestly did not know were possible. I should have asked: <span class=question>You can make d3 graphics without SVG?</span> <span class=question>Divs can be used to make bars?</span> <span class=question>I can use flexbox to do all the alignment math for me?</span>"},{"type":"text","value":"It turns out the answer to all of those questions is <strong>yes</strong>. In that moment, I was being stubborn and eventually got the SVG to work the way I wanted, but Matt’s suggestion stuck with me. And when I actually saw it in action in one of his more <a href=https://pudding.cool/2018/05/similarity/ target=_blank>recent projects</a>, I was mind-blown. I ended up loving it so much that one of the <a href=https://pudding.cool/2018/06/makeup-shades>most recent data-viz stories</a> that I programmed contains <strong>no SVG</strong>. I’m so in love with this method (for very specific circumstances) that I wanted to shout it from the roof-tops...or at least from this blogpost."},{"type":"text","value":"In this post, I’ll give some background information that I wish I knew, and an example of how to use this method to make a waffle chart, a modified histogram, and a stacked bar chart."}],"need-title":"Some Important Context","need-disclaimer":"If you’re already super-familiar with the inner-workings of d3.js, DOM elements, and Flexbox, you can skip this section.","need":[{"type":"text","value":"Although I’d been using d3 to make graphics for over a year, I had some major mis-conceptions about what it can do that stopped me from fully grasping this concept early on. So here’s some things I wish I knew:"}],"need-list":["<strong>d3 manipulates DOM elements, not just SVG</strong>: In hindsight, I feel like this one should have been obvious, but I clearly missed it. It even says it right on the d3 homepage: “D3 allows you to bind arbitrary data to a Document Object Model (DOM), and then apply data-driven transformations to the document.” meaning that while d3 <em>can</em> create and manipulate DOM elements that are on an SVG plane (think <code>path</code>, <code>rect</code>, <code>circle</code> etc. elements), it can also manipulate non-SVG elements (like <code>text</code>, <code>div</code>, and <code>span</code> elements).","<strong>Flexbox arranges DOM elements in rows or columns</strong>: Unlike <a href=https://css-tricks.com/snippets/css/complete-guide-grid/ target=_blank>CSS grid</a>, Flexbox arranges items in a one-dimensional manner in either a row <em>or</em> column format. While you can use CSS-grid for the methods described in this post, I’m going to primarily focus on using Flexbox. More info on the differences can be found <a href=https://hackernoon.com/the-ultimate-css-battle-grid-vs-flexbox-d40da0449faf target=_blank>here</a>.","<strong>Flexbox can organize non-SVG DOM elements</strong>: As far as I can tell, you can’t use Flexbox to arrange objects that were created with SVG. That is, if you have a bunch of <code>rect</code> elements on your SVG, Flexbox can’t move them. But, if you have several, separate SVG elements (think <a href=https://pudding.cool/2017/04/beer/ target=_blank>small multiples</a>), Flexbox can arrange them for you."],"need-post":[{"type":"text","value":"Once I understood these two things, Matt’s suggestion made a bit more sense. I could use d3 to create/manipulate things like <code>div</code>s, <em>and</em> I could then arrange those elements using Flexbox."}],"work-title":"Making a Waffle Chart","work":[{"type":"text","value":"Let’s start with a waffle chart. In this kind of graphic, we’ll use small blocks to represent a percentage of something (much like a square pie chart). For this example, we’ll say that 5% of our readers <a href=https://pudding.cool/process/resize/ target=_blank>resize their browser</a>."},{"type":"text","value":"To make this kind of graphic, we’ll need a single <code>figure</code> element with 100 smaller <code>div</code> elements inside of it. Like this:"}],"waffle-html":"In your HTML file, you’ll only need a single, empty <code>figure</code> element. Remember, no need to add an SVG element.","waffle-js":"Since we’re going to need 100 blocks (in our case, <code>div</code> elements) inside of our <code>figure</code> element, we can add them with JavaScript. In this example, we’re creating an array of 100 numbers and creating a div for each one. To make our graphic represent 5% of something, we need 5 of our 100 blocks to be stylistically different from the rest. Here we set the style <code>background-color</code> to be red if the number is less than 5 and gray if it’s greater than 5.","waffle-css":"The magic of this method shows up here, in the CSS. At this point, we have an outer-most <code>figure</code> element called <code>waffle</code> and 100 divs inside that are each called <code>block</code>. Using CSS, we can define the size of our <code>block</code> and <code>waffle</code> elements, and use Flexbox to arrange them.","waffle-css-post":"Here, the designation <code>display: flex</code> indicates that the <code>waffle</code> <code>figure</code> element should be considered a flex container. The line <code>flex-wrap: wrap</code> indicates that the items inside of <code>waffle</code> should line themselves up in a row (starting in the upper left-hand corner) until they reach the end of the container (in this case, <code>width: 140px</code>), and then form a new row. If you want this process to start in the lower right-hand corner instead, use <code>flex-wrap: wrap-reverse</code>. Last, give your <code>block</code> elements a <code>width</code> and <code>height</code> to make them visible. That’s it!","waffle-results":"Here’s what our final graphic looks like. Feel free to inspect it to double-check that it’s only made up of <code>div</code> elements.","hist-title":"Making a Modified Histogram","hist":[{"type":"text","value":"<a href=https://en.wikipedia.org/wiki/Histogram target=_blank>Histograms</a> are generally used to show a distribution in the data. While a typical histogram uses a single bar of varying height to signify the count of items in a bin, at The Pudding, we often use a type of modified histogram, where small shapes of identical size are stacked on top of one another. So, instead of a 100px tall rectangle representing a count of 10, you could have 10, 10px tall rectangles (spaced 1px apart) representing a count of 10."},{"type":"text","value":"To make a modified histogram using this method, you need to plan for the overall structure of your graphic. You’ll need a <code>figure</code> element to contain the entire graphic, a <code>div</code> for each stack of blocks, and a <code>div</code> for each block. Like this:"}],"hist-html":"Again, we’ll start with a single <code>figure</code> element to contain everything.","hist-js":"For this example, we’ll make a histogram of the state where each of The Pudding team members lives. We’ll manually add the state data for each of our 6 members, but you could have imported the data using d3.csv or d3.json. Next, we need to nest the data by state, add a <code>div</code> to contain all the blocks we’ll add for each state. Then, to each group <code>div</code> we need to add the appropriate number of block <code>div</code> elements. Last, we’ll add a state label to each group.","hist-css":"Here we have two elements that need to act as flexbox containers. To align the block <code>div</code> elements and the label in a column, we assign the group <code>div</code> <code>display: flex</code> and <code>flex-direction: column</code>.  Then, we want all 3 groups to sit next to one another in a row, so we assign the hist <code>figure</code> element <code>display: flex</code> and <code>flex-direction: row</code>. This automatically aligns the groups in a row, but they are also aligned at the <em>tops</em> of their groups (so the stacks look like they are hanging from the top of the graphic instead of growing from the bottom). To fix this, we assign <code>align-items: flex-end</code>.","hist-results":"Here’s what our final graphic looks like. Once again, feel free to inspect it to double-check that it’s only made up of <code>div</code> elements.","stack-title":"Making a Stacked Bar Chart","stack":"Stacked bar charts are slightly more complex than waffle charts or histograms because they require 2 additional elements: different sized block <code>div</code> elements and a Y axis. Structurally, it needs to be set up like this:"}